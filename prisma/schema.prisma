// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ActivityType {
  RUN
  BIKE
  SWIM
}


model Group {
  id              Int    @id @default(autoincrement())
  name            String
  nickname        String
  password        String
  description     String
  imgurl          String
  tag             String
  tgetcount       Int
  recomdcount     Int
  badgeyn         Boolean
  point           Int
  discodewebUrl   String
  discodesvrUrl   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Record {
  id            Int           @id @unique
  type          ActivityType
  description   String?
  duration      Int
  distance      Float
  photos        Photo[]
  like          Like[]
  tags          ActivityTag[]
  createdAt     DateTime      @default(now())
  updateAt      DateTime      @updatedAt
  authorId      Int
  author        Participant   @relation(fields: [participantId], references: [id])
  groupid       Int
  group         Group         @relation(fields: [groupGroupId], references: [groupId])
  participantId Int
  groupGroupId  Int
}

model Photo {
  id        Int      @id @unique
  recordId  Int
  record    Record   @relation(fields: [recordId], references: [id])
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Like {
  id            Int         @id @unique
  recordId      Int
  record        Record      @relation(fields: [recordId], references: [id])
  participantId Int
  participant   Participant @relation(fields: [participantId], references: [id])
}

model Tag {
  id           Int           @id @unique
  name         String        @unique
  activityTags ActivityTag[]
  createdAt    DateTime      @default(now())
}

model ActivityTag {
  id           Int     @id
  tagid        Int
  groupid      Int
  group        Group   @relation(fields: [groupGroupId], references: [groupId])
  tag          Tag     @relation(fields: [tagId], references: [id])
  Record       Record? @relation(fields: [recordId], references: [id])
  recordId     Int?
  groupGroupId Int
  tagId        Int
}

model Participant {
  groupId        Int      @id
  nickname  String
  password  String
  groupId   Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  Record    Record[]
  Like      Like[]
}
