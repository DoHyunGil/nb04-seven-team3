// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ActivityType {
  RUN
  BIKE
  SWIM
}

enum RankDuration {
  MONTHLY
  WEEKLY
}

model Group {
  id              Int           @id @default(autoincrement())
  name            String
  nickname        String
  password        String
  description     String
  imgUrl          String
  tag             String
  targetCount     Int
  recommendCount  Int
  badgeYn         Boolean
  point           Int
  discordWebUrl   String
  discordServerUrl String
  ranks           Rank[]
  tags            ActivityTag[]
  records         Record[]
  likes           Like[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Participant {
  id        Int      @id @default(autoincrement())
  nickname  String
  password  String
  groupId   Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  Record    Record[]
  Like      Like[]
  ranks Rank[]
}

model Record {
id          Int           @id @default(autoincrement())
  type        ActivityType
  description String?
  duration    Int
  distance    Float
  photos      Photo[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  authorId    Int
  author      Participant   @relation(fields: [authorId], references: [id])
  groupId     Int
  group       Group         @relation(fields: [groupId], references: [id])
}

model Photo {
  id        Int      @id @default(autoincrement())
  recordId  Int
  record    Record   @relation(fields: [recordId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id            Int          @id @default(autoincrement())
  groupId       Int
  group         Group        @relation(fields: [groupId], references: [id])
  participantId Int
  participant   Participant  @relation(fields: [participantId], references: [id])
  createdAt     DateTime     @default(now())

  @@unique([groupId, participantId])
}

model Tag {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  activityTags  ActivityTag[]
}

model ActivityTag {
  groupId      Int
  group        Group   @relation(fields: [groupId], references: [id])
  tagId        Int
  tag          Tag     @relation(fields: [tagId], references: [id])
  
  @@id([groupId, tagId])
}


model Rank {
  id           Int           @id @default(autoincrement())
  groupId      Int
  group        Group         @relation(fields: [groupId], references: [id])
  participantId Int
  participant  Participant   @relation(fields: [participantId], references: [id])
  recordCount  Int
  recordTime   Int
  duration     RankDuration
  createdAt    DateTime      @default(now())
  
  @@unique([groupId, participantId, duration])
}