generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id               Int           @id @default(autoincrement())
  name             String
  nickname         String
  password         String
  description      String
  imgUrl           String
  tag              String
  targetCount      Int
  recommendCount   Int
  badgeYn          Boolean
  point            Int
  discordWebUrl    String
  discordServerUrl String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  tags             ActivityTag[]
  ranks            Rank[]
  records          Record[]
}

model Participant {
  id        Int      @id @default(autoincrement())
  nickname  String
  password  String
  groupId   Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  Like      Like[]
  ranks     Rank[]
  Record    Record[]
}

model Record {
  id          Int          @id @default(autoincrement())
  type        ActivityType
  description String?
  duration    Int
  distance    Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  authorId    Int
  groupId     Int
  likes       Like[]
  photos      Photo[]
  author      Participant  @relation(fields: [authorId], references: [id])
  group       Group        @relation(fields: [groupId], references: [id])
}

model Photo {
  id        Int      @id @default(autoincrement())
  recordId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  record    Record   @relation(fields: [recordId], references: [id])
}

model Like {
  id            Int         @id @default(autoincrement())
  recordId      Int
  participantId Int
  participant   Participant @relation(fields: [participantId], references: [id])
  record        Record      @relation(fields: [recordId], references: [id])

  @@unique([recordId, participantId])
}

model Tag {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  activityTags ActivityTag[]
}

model ActivityTag {
  groupId Int
  tagId   Int
  group   Group @relation(fields: [groupId], references: [id])
  tag     Tag   @relation(fields: [tagId], references: [id])

  @@id([groupId, tagId])
}

model Rank {
  id            Int          @id @default(autoincrement())
  groupId       Int
  participantId Int
  recordCount   Int
  recordTime    Int
  duration      RankDuration
  createdAt     DateTime     @default(now())
  group         Group        @relation(fields: [groupId], references: [id])
  participant   Participant  @relation(fields: [participantId], references: [id])

  @@unique([groupId, participantId, duration])
}

enum ActivityType {
  RUN
  BIKE
  SWIM
}

enum RankDuration {
  MONTHLY
  WEEKLY
}
