// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ActivityType {
  RUN
  BIKE
  SWIM
}

enum RankDuration {
  MONTHLY
  WEEKLY
}

model Group {
  id                Int                @id @default(autoincrement())
  name              String            
  description       String
  photoUrl          String
  goalRep           Int
  likeCount         Int
  badgeYn           Boolean
  point             Int
  discordWebhookUrl String
  discordInviteUrl  String

  //1:N 관계입니다. owner는 여러 그룹을 가질 수 있습니다.
  ownerId           Int
  owner             Participant      @relation("GroupOwner", fields: [ownerId], references: [id])

  //N:M 관계입니다.
  participants Participant[] @relation("GroupMembers")

  ranks             Rank[]
  tags              ActivityTag[]
  records           Record[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Participant {
  id                Int                @id @default(autoincrement())
  nickname          String             
  password          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  record            Record[]
  like              Like[]
  ranks             Rank[]
  
  //가진 그룹을 표시합니다.
  ownedGroups        Group[]           @relation("GroupOwner")
  
  //참가한 그룹들을 표시합니다.
  groups Group[] @relation("GroupMembers")
}


// model GroupParticipant {
//   groupId       Int
//   participantId Int
//   group         Group       @relation(fields: [groupId], references: [id])
//   participant   Participant @relation(fields: [participantId], references: [id])

//   @@id([groupId, participantId])
// }

model Record {
  id          Int          @id @default(autoincrement())
  type        ActivityType
  description String?
  duration    Int
  distance    Float
  photos      Photo[]
  likes       Like[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  authorId    Int
  author      Participant  @relation(fields: [authorId], references: [id])
  groupId     Int
  group       Group        @relation(fields: [groupId], references: [id])
}

model Photo {
  id        Int      @id @default(autoincrement())
  url       String
  recordId  Int
  record    Record   @relation(fields: [recordId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id            Int         @id @default(autoincrement())
  recordId      Int
  record        Record      @relation(fields: [recordId], references: [id])
  participantId Int
  participant   Participant @relation(fields: [participantId], references: [id])

  @@unique([recordId, participantId])
}

model Tag {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  activityTags ActivityTag[]
}

model ActivityTag {
  groupId Int
  group   Group @relation(fields: [groupId], references: [id])
  tagId   Int
  tag     Tag   @relation(fields: [tagId], references: [id])

  @@id([groupId, tagId])
}

model Rank {
  id            Int          @id @default(autoincrement())
  groupId       Int
  group         Group        @relation(fields: [groupId], references: [id])
  participantId Int
  participant   Participant  @relation(fields: [participantId], references: [id])
  recordCount   Int
  recordTime    Int
  duration      RankDuration
  createdAt     DateTime     @default(now())

  @@unique([groupId, participantId, duration])
}
